use datasets::cifar10;
use ndarray::{Array2, Array4, Axis, s};
use rand::Rng;
use rust_rl::network::nn::NeuralNetwork;
use std::time::Instant;

fn new() -> NeuralNetwork {
    let mut nn = NeuralNetwork::new3d((3, 32, 32), "cce".to_string(), "adam".to_string());
    nn.set_batch_size(64);
    nn.set_learning_rate(0.001);
    nn.add_convolution((3, 3), 10, 1);
    nn.add_activation("sigmoid");
    nn.add_dropout(0.4);
    nn.add_flatten();
    //nn.add_dense(200); //Dense with 10 output neuron
    //nn.add_activation("sigmoid");
    nn.add_dense(10); //Dense with 10 output neuron
    nn.add_activation("softmax");
    nn
}

fn new2() -> NeuralNetwork {
    let mut nn = NeuralNetwork::new3d((3, 32, 32), "cce".to_string(), "adam".to_string());
    nn.set_batch_size(64);
    nn.set_learning_rate(0.001);
    nn.add_flatten();
    nn.add_dense(50); //Dense with 10 output neuron
    nn.add_activation("sigmoid");
    nn.add_dense(10); //Dense with 10 output neuron
    nn.add_activation("softmax");
    nn
}

fn test(nn: &mut NeuralNetwork, input: &Array4<f32>, feedback: &Array2<f32>) {
    nn.test(input.clone().into_dyn(), feedback.clone());
}

fn train(batch_size: usize, nn: &mut NeuralNetwork, num: usize, input: &Array4<f32>, fb: &Array2<f32>) {
    let mut rng = rand::thread_rng();
    for _ in 0..(num / batch_size) {
        let pos = rng.gen_range(0..(input.shape()[0] - batch_size)) as usize;
        let current_input = input.slice(s![pos..(pos+batch_size), .., .., ..]).into_owned();
        let current_fb = fb.slice(s![pos..(pos+batch_size), ..]).into_owned();
        nn.train(current_input.into_dyn(), current_fb.into_dyn());
    }
}

pub fn main() {
    let (train_size, test_size, depth, rows, cols) = (50_000, 10_000, 3, 32, 32);

    #[cfg(feature = "download")]
    cifar10::download_and_extract();
    let cifar10::Data {
        trn_img,
        trn_lbl,
        tst_img,
        tst_lbl,
        ..
    } = cifar10::new_normalized();
    assert_eq!(trn_img.shape(), &[train_size, depth, rows, cols]);
    assert_eq!(tst_img.shape(), &[test_size, depth, rows, cols]);

    // Get the image of the first digit.
    let first_image = trn_img.index_axis(Axis(0), 0);
    assert_eq!(first_image.shape(), &[3, 32, 32]);

    let mut nn = new2();
    nn.print_setup();
    let start = Instant::now();
    for i in 0..10 {
        print!("{}: ", i + 1);
        train(64, &mut nn, train_size, &trn_img, &trn_lbl);
        test(&mut nn, &tst_img, &tst_lbl);
    }
    let stop = Instant::now();
    let duration = stop.duration_since(start);
    println!(
        "Trained for {},{} seconds.",
        duration.as_secs(),
        duration.subsec_millis()
    );
}
