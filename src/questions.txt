this works: 
self.weights -= &d_w;

this not: 
self.weights -= d_w;

WHY?



 https://discord.com/channels/442252698964721669/448238009733742612/713537452886720582
thanks to
Rantanen
Jubilee
pie_flavor
Sepi
The0x539


A few days ago I started with Rust and really enjoyed how clean and fast it felt compared to C++ which I used before.
The main part I'm struggling with after reading the book and playing around with an own project was how to use which feature when structuring an entire project.
The question might fit project-management too, but I'm less interested in general project layout but more in the Rust way to handle this.
To be more specific, I would like to verify my understanding of these features in Rust:  

```
pub  
mod   
crate  
lib  
files
```

I will try to explain it based on my test project which consists of a (6x6) board game and different engines which will play the game.
I implemented two versions of the board, one with advanced logging and features, the other with just the basic features for best performance.
Furthermore I have multiple different engines which take a board struct and calculate a move.

```
pub struct Board {
  field : [[i8 ; 2] ; 36],
  total_rounds : u8,
}

impl Board {
  pub fn get_board(rounds: u8) -> Board {
    return Board{field: [[0,0];36], total_rounds : rounds};
  }
}
```

Due to my confidence level I will start bottom up:  

1.  `pub`:

    Inside of my `board.rs` I use `pub` similar to `private`/`public` in C++.
    My implementation above assures that I can call `get_board` and return a `Board` since both are public.  
    However, since `field` and `total_rounds` are not public, I can't create a `Board` without `get_board`.
    Also, I can't change any values inside the struct without the functions.


2.  Files:

    As an alternative to the simple board implementation I can implement a more advanced board in another file, `smart_board.rs`.
    There I can create a different struct with the same name (the interior is private anyway), as well as extra functions:
    
    ``` 
    pub struct Board {
      field : [[i8 ; 2] ; 36],
      total_rounds : u8,
      fancy_counter : u8,
    }
    ```


3. `mod`:

    I want to have multiple boards available, but in a bundled way.
    Still, I want to define them in their own files.
    They are useless alone, so I do not use an own crate, but mod.

    ```none
    src
    ├── board
    │   ├── fast_board.rs
    │   ├── mod.rs
    │   └── smart_board.rs
    ├── engine
    │   ├── ai_engine.rs
    │   ├── mod.rs
    │   └── random_engine.rs
    ├── lib.rs
    └── main.rs
    ``` 

    And in `board/mod.rs` I place:
    ```
    pub mod fast_board;
    pub mod smart_board
    ``` 
    As explained [here][1], a private parent hides public childrens, so I set both to public.
    But if that's the case, why isn't there any pub for my_mod in [this][1] example?
    Does the outer-most pub come with any special rules?


4.  `lib`:

    If I want to ship board and engine together I can use `lib.rs`.
    In my case I would enter:
    ```
    pub mod board;
    pub mod engine;
    ``` 
    This theoretically allows me to use board and engine in another main.rs just by including the lib. I can't figure out any case where it would make sense to add a mod xyz without a pub, since we would not be able to use anything from xyz. Am I correct?  

   
5.  Crates:

    I created another crate, `analysis`. I want to use it to see how different engines behave on which board. I'm aware that this might also work as part of the game crate.
    
    I add the following path to analysis/Cargo.toml in order to use my previous crate:
    ```
    [dependencies.game]
    path = "../game"
    ``` 
    However I do not understand why we have the extern command: `extern crate game`.
    Inside of my `analysis/src/main.rs` I can't notice any difference, whether I use it or not.
    In both cases I need the dependency in my toml and a `use game::board::{fast_board, smart_board}`.

Beside of the specific questions, can you see a part which might be working but could be changed to a more Rustician way?
To make sure I don't get used to to any bad habits.

  [1]: https://doc.rust-lang.org/rust-by-example/mod/visibility.html
